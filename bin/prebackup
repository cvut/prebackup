#!/bin/bash
set -e

# Re-execute in clean environment, but skip when running under sudo.
if [ -n "$HOME" ] && [ -z "$SUDO_USER" ]; then
	exec -c "$@"
fi

if [ ! -f "$1" ]; then
	echo 'ERROR: Argument $1 is not set or not a file!' >&2
	exit 2
fi

readonly VERSION='0.5.2'
readonly SHARE_DIR='/usr/local/share/prebackup'
readonly SCRIPT_FILE="$1"
readonly SCRIPT_DIR="$(cd "$(dirname "$SCRIPT_FILE")" && pwd)"

configs=(
	'/etc/bacula/prebackup.conf'
	"${SCRIPT_DIR}/config"
)
command="$(basename "$SCRIPT_FILE")"

# Global variables that may be overriden by a config file or CLI arguments,
# but these are set to read-only after the setup phase.
NAME="$(basename "$SCRIPT_DIR")"
RUN_AS=
SYSLOG='yes'
BASE_TARGET_DIR='/var/tmp/backup'
BASE_TEMP_DIR='/tmp/prebackup'
VERBOSE='no'

# Include shared utils.
source "$SHARE_DIR/utils.sh"

# Include config files.
for file in "${configs[@]}"; do
	if [ -f "$file" ]; then
		echo "Loading variables from: $(readlink -f $file)" >&2
		source "$file"
	fi
done

# Assign default values if not set.
: ${SYSLOG_TAG:=backup:$NAME}
: ${target_dir:=$BASE_TARGET_DIR/$NAME}
: ${temp_dir:=$BASE_TEMP_DIR/$NAME}

# Prepare directories.
mkdir -p -m 750 "$temp_dir"
mkdir -p -m 750 "$target_dir"

# If $RUN_AS is set and differs from the current user, then execute this script
# under the $RUN_AS user and exit.
if [ -n "$RUN_AS" ] && [ "$RUN_AS" != "$(id -un)" ]; then
	echo "Executing as user: $RUN_AS" >&2
	sudo -n -u "$RUN_AS" -- $@
	exit 0
fi

shift
while [ $# -gt 0 ]; do
	case $1 in
		-c | --command)
			command=$2
			shift 2
		;;
		-S | --no-syslog)
			SYSLOG='no'
			shift
		;;
		-v | --verbose)
			VERBOSE='yes'
			shift
		;;
		--version)
			echo "prebackup $VERSION"
			exit 1
		;;
		-*)
			fail "Unknown option $1" 2
		;;
	esac
done

readonly NAME RUN_AS SYSLOG SYSLOG_TAG BASE_TARGET_DIR BASE_TEMP_DIR VERBOSE

if [ "$SYSLOG" = 'yes' ]; then
	# Redirect STDOUT and STDERR to syslog and STDOUT.
	exec 1> >(tee | logger -t "$SYSLOG_TAG" -p local0.debug) 2>&1
fi

# Include actual script (hook) file.
source "$SCRIPT_FILE"

# Run setup hook if defined.
if type -t setup &>/dev/null; then
	setup
fi

case "$command" in
	pre-backup | post-backup)
		info "Running $command for $NAME"
		eval $command
		info "Completed $command for $NAME"
		;;
	*)
		fail "Unknown command: $command"
		;;
esac
